/* The following code was generated by JFlex 1.4.2 on 04.03.09 12:32 */

/* It's an automatically generated code. Do not modify it.   * 
** This file needs to be built with JFlex 1.4.2 or higher!!! */

package com.intellij.velocity.lexer;

import static com.intellij.velocity.psi.VtlElementTypes.*;
import com.intellij.velocity.psi.*;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 04.03.09 12:32 from the specification file
 * <tt>_VtlLexer.flex</tt>
 */
public class _VtlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DOUBLE_QUOTED_SIMPLE = 14;
  public static final int SINGLE_QUOTED = 16;
  public static final int DOUBLE_QUOTED_COMMENT_BODY = 20;
  public static final int INTERPOLATION = 4;
  public static final int AFTER_V_IDENT = 6;
  public static final int COMMENT_BODY = 18;
  public static final int YYINITIAL = 0;
  public static final int PARENS = 8;
  public static final int USER_DIRECTIVE = 2;
  public static final int RIGHT_BRACE_CONSUMER = 10;
  public static final int DOUBLE_QUOTED = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\4\1\1\22\0\1\3\1\14\1\17"+
    "\1\12\1\6\1\50\1\51\1\45\1\26\1\62\1\16\1\46\1\63"+
    "\1\7\1\10\1\47\12\5\1\64\1\65\1\55\1\53\1\56\2\0"+
    "\32\11\1\60\1\13\1\61\1\0\1\11\1\0\1\31\1\43\1\32"+
    "\1\34\1\20\1\24\1\57\1\33\1\23\1\11\1\44\1\21\1\41"+
    "\1\35\1\27\1\42\1\54\1\30\1\22\1\36\1\40\1\37\4\11"+
    "\1\15\1\52\1\25\54\0\1\11\12\0\1\11\4\0\1\11\5\0"+
    "\27\11\1\0\37\11\1\0\u013f\11\31\0\162\11\4\0\14\11\16\0"+
    "\5\11\11\0\1\11\213\0\1\11\13\0\1\11\1\0\3\11\1\0"+
    "\1\11\1\0\24\11\1\0\54\11\1\0\46\11\1\0\5\11\4\0"+
    "\202\11\10\0\105\11\1\0\46\11\2\0\2\11\6\0\20\11\41\0"+
    "\46\11\2\0\1\11\7\0\47\11\110\0\33\11\5\0\3\11\56\0"+
    "\32\11\5\0\13\11\25\0\12\5\4\0\2\11\1\0\143\11\1\0"+
    "\1\11\17\0\2\11\7\0\2\11\12\5\3\11\2\0\1\11\20\0"+
    "\1\11\1\0\36\11\35\0\3\11\60\0\46\11\13\0\1\11\u0152\0"+
    "\66\11\3\0\1\11\22\0\1\11\7\0\12\11\4\0\12\5\25\0"+
    "\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11\3\0"+
    "\4\11\3\0\1\11\36\0\2\11\1\0\3\11\4\0\12\5\2\11"+
    "\23\0\6\11\4\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11"+
    "\1\0\2\11\1\0\2\11\37\0\4\11\1\0\1\11\7\0\12\5"+
    "\2\0\3\11\20\0\11\11\1\0\3\11\1\0\26\11\1\0\7\11"+
    "\1\0\2\11\1\0\5\11\3\0\1\11\22\0\1\11\17\0\2\11"+
    "\4\0\12\5\25\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11"+
    "\1\0\2\11\1\0\5\11\3\0\1\11\36\0\2\11\1\0\3\11"+
    "\4\0\12\5\1\0\1\11\21\0\1\11\1\0\6\11\3\0\3\11"+
    "\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0\2\11"+
    "\3\0\3\11\3\0\10\11\1\0\3\11\55\0\11\5\25\0\10\11"+
    "\1\0\3\11\1\0\27\11\1\0\12\11\1\0\5\11\46\0\2\11"+
    "\4\0\12\5\25\0\10\11\1\0\3\11\1\0\27\11\1\0\12\11"+
    "\1\0\5\11\3\0\1\11\40\0\1\11\1\0\2\11\4\0\12\5"+
    "\25\0\10\11\1\0\3\11\1\0\27\11\1\0\20\11\46\0\2\11"+
    "\4\0\12\5\25\0\22\11\3\0\30\11\1\0\11\11\1\0\1\11"+
    "\2\0\7\11\72\0\60\11\1\0\2\11\14\0\7\11\11\0\12\5"+
    "\47\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\6\0\4\11\1\0\7\11\1\0\3\11\1\0\1\11\1\0\1\11"+
    "\2\0\2\11\1\0\4\11\1\0\2\11\11\0\1\11\2\0\5\11"+
    "\1\0\1\11\11\0\12\5\2\0\2\11\42\0\1\11\37\0\12\5"+
    "\26\0\10\11\1\0\42\11\35\0\4\11\164\0\42\11\1\0\5\11"+
    "\1\0\2\11\25\0\12\5\6\0\6\11\112\0\46\11\12\0\51\11"+
    "\7\0\132\11\5\0\104\11\5\0\122\11\6\0\7\11\1\0\77\11"+
    "\1\0\1\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11"+
    "\2\0\47\11\1\0\1\11\1\0\4\11\2\0\37\11\1\0\1\11"+
    "\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\7\11"+
    "\1\0\7\11\1\0\27\11\1\0\37\11\1\0\1\11\1\0\4\11"+
    "\2\0\7\11\1\0\47\11\1\0\23\11\16\0\11\5\56\0\125\11"+
    "\14\0\u026c\11\2\0\10\11\12\0\32\11\5\0\113\11\25\0\15\11"+
    "\1\0\4\11\16\0\22\11\16\0\22\11\16\0\15\11\1\0\3\11"+
    "\17\0\64\11\43\0\1\11\4\0\1\11\3\0\12\5\46\0\12\5"+
    "\6\0\130\11\10\0\51\11\127\0\35\11\51\0\12\5\36\11\2\0"+
    "\5\11\u038b\0\154\11\224\0\234\11\4\0\132\11\6\0\26\11\2\0"+
    "\6\11\2\0\46\11\2\0\6\11\2\0\10\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\37\11\2\0\65\11\1\0\7\11\1\0"+
    "\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0"+
    "\15\11\5\0\3\11\1\0\7\11\164\0\1\11\15\0\1\11\202\0"+
    "\1\11\4\0\1\11\2\0\12\11\1\0\1\11\3\0\5\11\6\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0\3\11\1\0"+
    "\7\11\3\0\3\11\5\0\5\11\u0ebb\0\2\11\52\0\5\11\5\0"+
    "\2\11\4\0\126\11\6\0\3\11\1\0\132\11\1\0\4\11\5\0"+
    "\50\11\4\0\136\11\21\0\30\11\70\0\20\11\u0200\0\u19b6\11\112\0"+
    "\u51a6\11\132\0\u048d\11\u0773\0\u2ba4\11\u215c\0\u012e\11\2\0\73\11\225\0"+
    "\7\11\14\0\5\11\5\0\1\11\1\0\12\11\1\0\15\11\1\0"+
    "\5\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0\154\11\41\0"+
    "\u016b\11\22\0\100\11\2\0\66\11\50\0\14\11\164\0\5\11\1\0"+
    "\207\11\23\0\12\5\7\0\32\11\6\0\32\11\13\0\131\11\3\0"+
    "\6\11\2\0\6\11\2\0\6\11\2\0\3\11\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\5\0\1\1\2\2\1\3\1\4\26\0\4\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\5"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\4\7\1\24\1\25\4\7\1\26\1\27\1\30"+
    "\1\31\2\5\1\32\1\33\1\34\1\7\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\3\1\1\44\1\2"+
    "\1\45\1\2\1\46\2\3\3\4\25\0\1\47\2\0"+
    "\1\1\1\50\1\0\1\51\12\1\1\0\1\52\1\53"+
    "\1\0\1\54\2\0\1\15\1\55\1\56\1\57\1\60"+
    "\1\0\1\61\1\62\1\63\1\33\1\64\1\7\1\65"+
    "\1\7\1\60\2\7\1\66\1\65\1\62\1\63\2\67"+
    "\1\34\1\0\1\70\1\50\1\71\1\72\1\3\1\72"+
    "\1\73\37\0\1\74\1\0\1\75\2\50\12\0\6\1"+
    "\1\76\6\1\1\77\1\100\1\7\1\66\1\20\1\7"+
    "\1\101\1\3\1\72\1\73\50\0\1\1\1\102\2\1"+
    "\1\103\1\1\1\0\1\104\6\1\1\105\36\0\1\76"+
    "\6\0\1\106\2\102\2\1\1\0\1\107\1\110\6\1"+
    "\25\0\1\103\7\0\1\106\1\1\1\106\2\1\2\110"+
    "\3\1\1\111\1\112\1\113\24\0\1\114\4\1\1\115"+
    "\1\0\1\116\1\0\1\117\2\113\15\0\1\111\1\112"+
    "\1\0\1\120\1\1\1\121\1\122\1\123\1\0\1\124"+
    "\3\0\1\114\4\0\1\115\1\125\1\0\1\126\1\0"+
    "\1\127\1\0\1\130\1\0\1\121\1\122\1\123\1\0"+
    "\1\131\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u07ce\0\u07ce\0\u07ce\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u0912\0\u097e\0\u09b4\0\u07ce\0\u07ce\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u07ce\0\u07ce\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u07ce\0\u07ce\0\u07ce\0\u07ce\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u07ce\0\u07ce\0\u0d14\0\u07ce\0\u07ce\0\u07ce"+
    "\0\u07ce\0\u0d4a\0\u0d80\0\u0db6\0\u07ce\0\u0dec\0\u07ce\0\u0e22"+
    "\0\u07ce\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c"+
    "\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u05e8\0\u12c6"+
    "\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u07ce\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\u07ce\0\u16c8\0\u07ce\0\u16fe\0\u1734"+
    "\0\u07ce\0\u176a\0\u0912\0\u17a0\0\u07ce\0\u176a\0\u07ce\0\u07ce"+
    "\0\u09ea\0\u07ce\0\u083a\0\u083a\0\u083a\0\u083a\0\u17d6\0\u083a"+
    "\0\u180c\0\u083a\0\u1842\0\u1878\0\u07ce\0\u07ce\0\u07ce\0\u07ce"+
    "\0\u07ce\0\u083a\0\u083a\0\u18ae\0\u07ce\0\u18e4\0\u07ce\0\u191a"+
    "\0\u1950\0\u1986\0\u1950\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94"+
    "\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44"+
    "\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4"+
    "\0\u07ce\0\u07ce\0\u1fda\0\u2010\0\u07ce\0\u2046\0\u07ce\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\u083a\0\u083a\0\u25f8\0\u262e\0\u07ce\0\u07ce\0\u07ce"+
    "\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de"+
    "\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee"+
    "\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e"+
    "\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u07ce"+
    "\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u083a\0\u3192"+
    "\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342"+
    "\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2"+
    "\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2"+
    "\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u3018\0\u37e6\0\u381c"+
    "\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u07ce\0\u3996"+
    "\0\u39cc\0\u3a02\0\u07ce\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10"+
    "\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0"+
    "\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70"+
    "\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u3a02"+
    "\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u4164\0\u419a"+
    "\0\u41d0\0\u07ce\0\u4206\0\u423c\0\u4272\0\u07ce\0\u42a8\0\u42de"+
    "\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458\0\u448e"+
    "\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608\0\u463e"+
    "\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee"+
    "\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932\0\u4968\0\u07ce"+
    "\0\u499e\0\u07ce\0\u49d4\0\u07ce\0\u4a0a\0\u4a40\0\u4a76\0\u4aac"+
    "\0\u4ae2\0\u4b18\0\u4b4e\0\u4b84\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c"+
    "\0\u4c92\0\u4968\0\u499e\0\u4cc8\0\u07ce\0\u4cfe\0\u4d34\0\u4d6a"+
    "\0\u4da0\0\u4dd6\0\u07ce\0\u4e0c\0\u4e42\0\u4e78\0\u4cc8\0\u4eae"+
    "\0\u4ee4\0\u4f1a\0\u4f50\0\u4dd6\0\u4f86\0\u4fbc\0\u07ce\0\u4ff2"+
    "\0\u07ce\0\u5028\0\u07ce\0\u505e\0\u4fbc\0\u4ff2\0\u5028\0\u5094"+
    "\0\u07ce\0\u5094";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\6\42\1\43\3\42\1\44\1\45\52\42\1\46\4\47"+
    "\4\46\1\50\3\46\1\51\2\46\5\50\1\52\1\53"+
    "\16\50\7\46\1\50\2\46\1\50\10\46\1\0\6\46"+
    "\1\54\6\46\5\54\2\46\16\54\7\46\1\54\2\46"+
    "\1\54\10\46\1\0\5\46\1\55\1\56\6\46\5\56"+
    "\2\46\16\56\7\46\1\56\2\46\1\56\7\46\4\47"+
    "\1\57\1\60\1\61\1\62\1\50\2\46\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\50\1\71\1\72\1\73"+
    "\1\74\1\75\1\50\1\76\3\50\1\77\1\100\6\50"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\50"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\2\46\1\0\22\46\1\121\40\46\6\122\1\43"+
    "\3\122\1\123\1\124\3\122\1\125\46\122\6\126\1\46"+
    "\3\126\1\46\4\126\1\127\46\126\45\130\1\131\20\130"+
    "\12\12\1\132\3\12\1\133\47\12\12\134\1\135\3\134"+
    "\1\136\1\46\46\134\12\0\1\137\101\0\1\140\51\0"+
    "\1\141\65\0\1\142\65\0\1\143\65\0\1\144\65\0"+
    "\1\145\65\0\1\146\65\0\1\147\65\0\1\150\65\0"+
    "\1\151\65\0\1\152\56\0\1\140\22\0\1\140\51\0"+
    "\1\153\65\0\1\154\65\0\1\155\61\0\1\156\64\0"+
    "\1\35\1\0\1\35\1\0\1\157\6\0\5\157\2\0"+
    "\16\157\7\0\1\157\2\0\1\157\14\0\1\160\70\0"+
    "\1\161\6\0\5\161\2\0\16\161\7\0\1\161\2\0"+
    "\1\161\13\0\1\40\3\0\1\162\6\0\5\162\2\0"+
    "\16\162\7\0\1\162\2\0\1\162\17\0\1\163\6\0"+
    "\5\163\2\0\16\163\7\0\1\163\2\0\1\163\6\0"+
    "\6\42\1\0\3\42\1\0\53\42\11\0\1\164\2\0"+
    "\1\165\1\166\2\0\5\164\2\0\16\164\7\0\1\164"+
    "\2\0\1\164\17\0\1\167\1\170\2\0\1\171\1\172"+
    "\1\0\1\173\1\174\1\175\1\176\1\177\2\0\5\167"+
    "\1\200\4\167\1\201\1\202\1\203\1\167\7\0\1\167"+
    "\2\0\1\167\6\0\6\42\1\204\3\42\1\204\53\42"+
    "\67\0\4\47\66\0\1\50\1\0\1\50\1\0\1\50"+
    "\6\0\5\50\2\0\16\50\7\0\1\50\2\0\1\50"+
    "\13\0\1\54\1\0\1\54\1\205\1\54\6\0\5\54"+
    "\1\206\1\0\16\54\7\0\1\54\2\0\1\54\17\0"+
    "\1\207\6\0\5\207\2\0\16\207\7\0\1\207\2\0"+
    "\1\207\13\0\1\56\2\0\1\210\1\56\6\0\5\56"+
    "\1\206\1\211\16\56\7\0\1\56\2\0\1\56\13\0"+
    "\1\57\2\0\1\212\62\0\1\57\1\0\1\213\1\212"+
    "\3\0\1\214\1\215\55\0\1\216\2\0\1\217\130\0"+
    "\1\220\12\0\6\221\1\0\3\221\1\0\4\221\1\222"+
    "\46\221\5\0\1\50\1\0\1\50\1\0\1\50\6\0"+
    "\5\50\2\0\16\50\7\0\1\223\2\0\1\50\13\0"+
    "\1\50\1\0\1\50\1\0\1\50\6\0\1\224\4\50"+
    "\2\0\7\50\1\225\6\50\7\0\1\50\2\0\1\50"+
    "\13\0\1\50\1\0\1\50\1\0\1\50\6\0\5\50"+
    "\2\0\6\50\1\226\7\50\7\0\1\50\2\0\1\50"+
    "\13\0\1\50\1\0\1\50\1\0\1\50\6\0\5\50"+
    "\2\0\2\50\1\227\13\50\7\0\1\50\2\0\1\50"+
    "\13\0\1\50\1\0\1\50\1\0\1\50\6\0\5\50"+
    "\2\0\1\50\1\230\14\50\7\0\1\50\2\0\1\50"+
    "\13\0\1\50\1\0\1\50\1\0\1\50\6\0\5\50"+
    "\2\0\6\50\1\231\7\50\7\0\1\50\2\0\1\50"+
    "\13\0\1\50\1\0\1\50\1\0\1\50\6\0\1\232"+
    "\4\50\2\0\1\233\15\50\7\0\1\50\2\0\1\50"+
    "\13\0\1\50\1\0\1\50\1\0\1\50\6\0\5\50"+
    "\2\0\1\50\1\234\14\50\7\0\1\50\2\0\1\50"+
    "\57\0\1\235\66\0\1\236\66\0\1\237\65\0\1\240"+
    "\65\0\1\241\17\0\1\50\1\0\1\50\1\0\1\50"+
    "\6\0\1\242\4\50\2\0\7\50\1\243\6\50\7\0"+
    "\1\50\2\0\1\50\16\0\1\244\14\0\1\245\40\0"+
    "\6\122\1\0\3\122\1\0\4\122\1\0\46\122\11\0"+
    "\1\167\1\246\2\0\1\171\1\247\1\0\1\173\1\174"+
    "\1\175\1\176\1\177\2\0\5\167\1\200\4\167\1\201"+
    "\1\202\1\203\1\167\7\0\1\167\2\0\1\167\6\0"+
    "\6\122\1\204\3\122\1\204\4\122\1\0\46\122\6\126"+
    "\1\0\3\126\1\0\4\126\1\0\46\126\45\130\1\0"+
    "\20\130\12\12\1\132\3\12\1\250\61\12\1\251\3\12"+
    "\1\133\47\12\12\134\1\135\3\134\1\136\1\0\60\134"+
    "\1\135\3\134\1\252\1\0\60\134\1\253\3\134\1\136"+
    "\1\0\46\134\15\0\1\254\2\0\1\255\50\0\1\140"+
    "\77\0\1\256\6\0\1\257\56\0\1\260\16\0\1\261"+
    "\46\0\1\262\3\0\1\263\61\0\1\264\2\0\1\265"+
    "\62\0\1\266\5\0\1\267\57\0\1\270\23\0\1\271"+
    "\41\0\1\272\24\0\1\273\40\0\1\274\4\0\1\275"+
    "\60\0\1\276\5\0\1\277\57\0\1\300\2\0\1\301"+
    "\62\0\1\302\2\0\1\303\62\0\1\304\4\0\1\305"+
    "\60\0\1\306\25\0\1\307\36\0\1\310\1\311\64\0"+
    "\1\311\56\0\1\161\1\0\1\161\1\0\1\161\6\0"+
    "\5\161\2\0\16\161\7\0\1\161\2\0\1\161\13\0"+
    "\1\40\2\0\1\312\1\162\6\0\5\162\2\0\16\162"+
    "\7\0\1\162\2\0\1\162\13\0\1\163\3\0\1\163"+
    "\6\0\5\163\2\0\16\163\7\0\1\163\2\0\1\163"+
    "\13\0\1\164\1\0\1\164\1\0\1\164\6\0\5\164"+
    "\2\0\16\164\7\0\1\164\2\0\1\164\17\0\1\164"+
    "\3\0\1\166\2\0\5\164\2\0\16\164\7\0\1\164"+
    "\2\0\1\164\17\0\1\313\6\0\5\313\2\0\16\313"+
    "\7\0\1\313\2\0\1\313\11\0\1\314\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\6\0\5\167\1\0\1\315"+
    "\16\167\7\0\1\167\2\0\1\167\6\0\1\170\1\316"+
    "\1\317\63\170\11\0\1\320\6\0\1\321\1\322\1\323"+
    "\1\324\1\325\2\0\5\320\1\326\4\320\1\327\1\330"+
    "\1\331\1\320\7\0\1\320\2\0\1\320\11\0\1\314"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\6\0\1\167"+
    "\1\332\3\167\1\0\1\315\6\167\1\333\1\167\1\334"+
    "\5\167\7\0\1\167\2\0\1\167\11\0\1\314\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\3\167\1\335"+
    "\1\167\1\0\1\315\16\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\1\336\4\167\1\0\1\315\7\167\1\337\6\167"+
    "\7\0\1\167\2\0\1\167\11\0\1\314\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\6\0\4\167\1\340\1\0"+
    "\1\315\6\167\1\341\7\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\5\167\1\0\1\315\1\342\15\167\7\0\1\167"+
    "\2\0\1\167\11\0\1\314\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\6\0\1\343\4\167\1\0\1\315\16\167"+
    "\7\0\1\167\2\0\1\167\11\0\1\314\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\6\0\5\167\1\0\1\315"+
    "\2\167\1\344\13\167\7\0\1\167\2\0\1\167\11\0"+
    "\1\314\1\0\1\167\1\0\1\167\1\0\1\167\6\0"+
    "\5\167\1\0\1\315\2\167\1\345\13\167\7\0\1\167"+
    "\2\0\1\167\11\0\1\314\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\6\0\5\167\1\0\1\315\1\167\1\346"+
    "\14\167\7\0\1\167\2\0\1\167\17\0\1\347\6\0"+
    "\5\347\2\0\16\347\7\0\1\347\2\0\1\347\13\0"+
    "\1\207\3\0\1\207\6\0\5\207\2\0\16\207\7\0"+
    "\1\207\2\0\1\207\17\0\1\350\6\0\5\350\2\0"+
    "\16\350\7\0\1\350\2\0\1\350\13\0\1\216\75\0"+
    "\1\215\55\0\1\50\1\0\1\50\1\0\1\50\6\0"+
    "\1\50\1\351\3\50\2\0\16\50\7\0\1\50\2\0"+
    "\1\50\13\0\1\50\1\0\1\50\1\0\1\50\6\0"+
    "\5\50\2\0\5\50\1\352\10\50\7\0\1\50\2\0"+
    "\1\50\13\0\1\50\1\0\1\50\1\0\1\50\6\0"+
    "\5\50\2\0\7\50\1\353\6\50\7\0\1\50\2\0"+
    "\1\50\13\0\1\50\1\0\1\50\1\0\1\50\6\0"+
    "\5\50\2\0\11\50\1\354\4\50\7\0\1\50\2\0"+
    "\1\50\17\0\1\355\6\0\5\355\2\0\16\355\7\0"+
    "\1\355\2\0\1\355\6\0\1\246\1\316\1\317\14\246"+
    "\1\0\46\246\12\0\1\356\71\0\1\357\61\0\1\360"+
    "\73\0\1\361\66\0\1\362\70\0\1\363\70\0\1\364"+
    "\72\0\1\365\51\0\1\366\66\0\1\367\67\0\1\370"+
    "\62\0\1\371\104\0\1\372\51\0\1\373\77\0\1\374"+
    "\71\0\1\375\55\0\1\376\76\0\1\377\54\0\1\u0100"+
    "\56\0\1\u0101\63\0\1\u0102\70\0\1\u0103\66\0\1\311"+
    "\61\0\1\u0104\66\0\1\u0105\64\0\1\u0106\102\0\1\u0107"+
    "\52\0\1\u0108\101\0\1\u0109\72\0\1\u010a\52\0\1\u010b"+
    "\52\0\1\311\55\0\1\313\1\0\1\313\1\0\1\313"+
    "\6\0\5\313\2\0\16\313\7\0\1\313\2\0\1\313"+
    "\11\0\1\314\22\0\1\315\41\0\1\317\70\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\5\320\1\314\1\0"+
    "\16\320\7\0\1\320\2\0\1\320\13\0\1\320\1\0"+
    "\1\320\1\0\1\320\6\0\1\320\1\u010c\3\320\1\314"+
    "\1\0\6\320\1\u010d\1\320\1\u010e\5\320\7\0\1\320"+
    "\2\0\1\320\13\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\3\320\1\u010f\1\320\1\314\1\0\16\320\7\0"+
    "\1\320\2\0\1\320\13\0\1\320\1\0\1\320\1\0"+
    "\1\320\6\0\1\u0110\4\320\1\314\1\0\7\320\1\u0111"+
    "\6\320\7\0\1\320\2\0\1\320\13\0\1\320\1\0"+
    "\1\320\1\0\1\320\6\0\4\320\1\u0112\1\314\1\0"+
    "\6\320\1\u0113\7\320\7\0\1\320\2\0\1\320\13\0"+
    "\1\320\1\0\1\320\1\0\1\320\6\0\5\320\1\314"+
    "\1\0\1\u0114\15\320\7\0\1\320\2\0\1\320\13\0"+
    "\1\320\1\0\1\320\1\0\1\320\6\0\1\u0115\4\320"+
    "\1\314\1\0\16\320\7\0\1\320\2\0\1\320\13\0"+
    "\1\320\1\0\1\320\1\0\1\320\6\0\5\320\1\314"+
    "\1\0\2\320\1\u0116\13\320\7\0\1\320\2\0\1\320"+
    "\13\0\1\320\1\0\1\320\1\0\1\320\6\0\5\320"+
    "\1\314\1\0\2\320\1\u0117\13\320\7\0\1\320\2\0"+
    "\1\320\13\0\1\320\1\0\1\320\1\0\1\320\6\0"+
    "\5\320\1\314\1\0\1\320\1\u0118\14\320\7\0\1\320"+
    "\2\0\1\320\11\0\1\314\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\6\0\2\167\1\u0119\2\167\1\0\1\315"+
    "\16\167\7\0\1\167\2\0\1\167\11\0\1\314\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\5\167\1\0"+
    "\1\315\5\167\1\u011a\10\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\5\167\1\0\1\315\2\167\1\u011b\13\167\7\0"+
    "\1\167\2\0\1\167\11\0\1\314\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\5\167\1\0\1\315\7\167"+
    "\1\u011c\6\167\7\0\1\167\2\0\1\167\11\0\1\314"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\6\0\5\167"+
    "\1\0\1\315\7\167\1\u011d\6\167\7\0\1\167\2\0"+
    "\1\167\11\0\1\314\1\0\1\167\1\0\1\167\1\0"+
    "\1\167\6\0\5\167\1\0\1\315\1\u011e\15\167\7\0"+
    "\1\167\2\0\1\167\11\0\1\u011f\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\5\167\1\0\1\u0120\16\167"+
    "\7\0\1\167\2\0\1\167\11\0\1\314\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\6\0\5\167\1\0\1\315"+
    "\3\167\1\u0121\12\167\7\0\1\167\2\0\1\167\11\0"+
    "\1\314\1\0\1\167\1\0\1\167\1\0\1\167\6\0"+
    "\5\167\1\0\1\315\1\167\1\u0122\14\167\7\0\1\167"+
    "\2\0\1\167\11\0\1\314\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\6\0\4\167\1\u0123\1\0\1\315\16\167"+
    "\7\0\1\167\2\0\1\167\11\0\1\314\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\6\0\5\167\1\0\1\315"+
    "\3\167\1\u0124\12\167\7\0\1\167\2\0\1\167\11\0"+
    "\1\314\1\0\1\167\1\0\1\167\1\0\1\167\6\0"+
    "\5\167\1\0\1\315\1\167\1\u0125\14\167\7\0\1\167"+
    "\2\0\1\167\11\0\1\314\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\6\0\1\u0126\4\167\1\0\1\315\16\167"+
    "\7\0\1\167\2\0\1\167\13\0\1\347\3\0\1\347"+
    "\6\0\5\347\2\0\16\347\7\0\1\347\2\0\1\347"+
    "\13\0\1\350\3\0\1\350\6\0\5\350\2\0\16\350"+
    "\7\0\1\350\2\0\1\350\13\0\1\50\1\0\1\50"+
    "\1\0\1\50\6\0\2\50\1\354\2\50\2\0\16\50"+
    "\7\0\1\50\2\0\1\50\13\0\1\50\1\0\1\50"+
    "\1\0\1\50\6\0\1\u0127\4\50\2\0\16\50\7\0"+
    "\1\50\2\0\1\50\13\0\1\355\3\0\1\355\6\0"+
    "\5\355\2\0\16\355\7\0\1\355\2\0\1\355\27\0"+
    "\1\u0128\66\0\1\u0129\72\0\1\u012a\66\0\1\u012b\55\0"+
    "\1\u012c\71\0\1\u012d\64\0\1\u012e\100\0\1\u012f\66\0"+
    "\1\u0130\57\0\1\u0131\71\0\1\u0132\62\0\1\u0133\64\0"+
    "\1\u0134\66\0\1\u0135\64\0\1\u0136\64\0\1\u0105\55\0"+
    "\1\u0137\103\0\1\311\53\0\1\u0138\62\0\1\u0139\66\0"+
    "\1\u013a\100\0\1\u013b\64\0\1\311\67\0\1\u013c\56\0"+
    "\1\u013d\66\0\1\u013e\55\0\1\u013f\52\0\1\320\1\0"+
    "\1\320\1\0\1\320\6\0\2\320\1\u0140\2\320\1\314"+
    "\1\0\16\320\7\0\1\320\2\0\1\320\13\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\5\320\1\314\1\0"+
    "\5\320\1\u0141\10\320\7\0\1\320\2\0\1\320\13\0"+
    "\1\320\1\0\1\320\1\0\1\320\6\0\5\320\1\314"+
    "\1\0\2\320\1\u0142\13\320\7\0\1\320\2\0\1\320"+
    "\13\0\1\320\1\0\1\320\1\0\1\320\6\0\5\320"+
    "\1\314\1\0\7\320\1\u0143\6\320\7\0\1\320\2\0"+
    "\1\320\13\0\1\320\1\0\1\320\1\0\1\320\6\0"+
    "\5\320\1\314\1\0\7\320\1\u0144\6\320\7\0\1\320"+
    "\2\0\1\320\13\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\5\320\1\314\1\0\1\u0145\15\320\7\0\1\320"+
    "\2\0\1\320\13\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\5\320\1\u0146\1\0\16\320\7\0\1\320\2\0"+
    "\1\320\13\0\1\320\1\0\1\320\1\0\1\320\6\0"+
    "\5\320\1\314\1\0\3\320\1\u0147\12\320\7\0\1\320"+
    "\2\0\1\320\13\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\5\320\1\314\1\0\1\320\1\u0148\14\320\7\0"+
    "\1\320\2\0\1\320\13\0\1\320\1\0\1\320\1\0"+
    "\1\320\6\0\4\320\1\u0149\1\314\1\0\16\320\7\0"+
    "\1\320\2\0\1\320\13\0\1\320\1\0\1\320\1\0"+
    "\1\320\6\0\5\320\1\314\1\0\3\320\1\u014a\12\320"+
    "\7\0\1\320\2\0\1\320\13\0\1\320\1\0\1\320"+
    "\1\0\1\320\6\0\5\320\1\314\1\0\1\320\1\u014b"+
    "\14\320\7\0\1\320\2\0\1\320\13\0\1\320\1\0"+
    "\1\320\1\0\1\320\6\0\1\u014c\4\320\1\314\1\0"+
    "\16\320\7\0\1\320\2\0\1\320\11\0\1\314\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\1\u014d\4\167"+
    "\1\0\1\315\16\167\7\0\1\167\2\0\1\167\11\0"+
    "\1\u014e\1\0\1\167\1\0\1\167\1\0\1\167\6\0"+
    "\5\167\1\0\1\u014f\16\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\1\167\1\u0150\3\167\1\0\1\315\16\167\7\0"+
    "\1\167\2\0\1\167\11\0\1\314\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\1\u0151\4\167\1\0\1\315"+
    "\16\167\7\0\1\167\2\0\1\167\11\0\1\u0152\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\5\167\1\0"+
    "\1\u0153\16\167\7\0\1\167\2\0\1\167\11\0\1\314"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\6\0\5\167"+
    "\1\0\1\315\13\167\1\u0154\2\167\7\0\1\167\2\0"+
    "\1\167\11\0\1\u011f\22\0\1\u0120\42\0\1\314\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\1\167\1\u0155"+
    "\3\167\1\0\1\315\16\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\1\u0156\4\167\1\0\1\315\16\167\7\0\1\167"+
    "\2\0\1\167\11\0\1\314\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\6\0\3\167\1\u0157\1\167\1\0\1\315"+
    "\16\167\7\0\1\167\2\0\1\167\11\0\1\314\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\5\167\1\0"+
    "\1\315\1\167\1\u0158\14\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\2\167\1\u0159\2\167\1\0\1\315\16\167\7\0"+
    "\1\167\2\0\1\167\11\0\1\314\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\5\167\1\0\1\315\2\167"+
    "\1\u015a\13\167\7\0\1\167\2\0\1\167\30\0\1\u015b"+
    "\63\0\1\u015c\75\0\1\u015d\55\0\1\u015e\71\0\1\u015f"+
    "\64\0\1\u0160\100\0\1\u0161\47\0\1\u0162\76\0\1\u0163"+
    "\55\0\1\u0164\76\0\1\u0165\54\0\1\u0166\76\0\1\u0167"+
    "\63\0\1\u0168\65\0\1\u0139\73\0\1\u0138\54\0\1\311"+
    "\62\0\1\u0169\63\0\1\311\101\0\1\u0138\60\0\1\u016a"+
    "\100\0\1\311\43\0\1\u016b\76\0\1\u016c\41\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\1\u016d\4\320\1\314"+
    "\1\0\16\320\7\0\1\320\2\0\1\320\13\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\5\320\1\u014e\1\0"+
    "\16\320\7\0\1\320\2\0\1\320\13\0\1\320\1\0"+
    "\1\320\1\0\1\320\6\0\1\320\1\u016e\3\320\1\314"+
    "\1\0\16\320\7\0\1\320\2\0\1\320\13\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\1\u016f\4\320\1\314"+
    "\1\0\16\320\7\0\1\320\2\0\1\320\13\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\5\320\1\u0170\1\0"+
    "\16\320\7\0\1\320\2\0\1\320\13\0\1\320\1\0"+
    "\1\320\1\0\1\320\6\0\5\320\1\314\1\0\13\320"+
    "\1\u0171\2\320\7\0\1\320\2\0\1\320\13\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\1\320\1\u0172\3\320"+
    "\1\314\1\0\16\320\7\0\1\320\2\0\1\320\13\0"+
    "\1\320\1\0\1\320\1\0\1\320\6\0\1\u0173\4\320"+
    "\1\314\1\0\16\320\7\0\1\320\2\0\1\320\13\0"+
    "\1\320\1\0\1\320\1\0\1\320\6\0\3\320\1\u0174"+
    "\1\320\1\314\1\0\16\320\7\0\1\320\2\0\1\320"+
    "\13\0\1\320\1\0\1\320\1\0\1\320\6\0\5\320"+
    "\1\314\1\0\1\320\1\u0175\14\320\7\0\1\320\2\0"+
    "\1\320\13\0\1\320\1\0\1\320\1\0\1\320\6\0"+
    "\2\320\1\u0176\2\320\1\314\1\0\16\320\7\0\1\320"+
    "\2\0\1\320\13\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\5\320\1\314\1\0\2\320\1\u0177\13\320\7\0"+
    "\1\320\2\0\1\320\11\0\1\u0178\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\3\167\1\u0179\1\167\1\0"+
    "\1\u017a\16\167\7\0\1\167\2\0\1\167\11\0\1\u014e"+
    "\22\0\1\u014f\42\0\1\314\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\6\0\5\167\1\0\1\315\11\167\1\u017b"+
    "\4\167\7\0\1\167\2\0\1\167\11\0\1\314\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\5\167\1\0"+
    "\1\315\1\167\1\u017c\14\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\u0152\22\0\1\u0153\42\0\1\u017d\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\6\0\5\167\1\0\1\u017e"+
    "\16\167\7\0\1\167\2\0\1\167\11\0\1\314\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\5\167\1\0"+
    "\1\315\11\167\1\u017f\4\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\5\167\1\0\1\315\2\167\1\u0180\13\167\7\0"+
    "\1\167\2\0\1\167\11\0\1\314\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\5\167\1\0\1\315\6\167"+
    "\1\u0181\7\167\7\0\1\167\2\0\1\167\11\0\1\314"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\6\0\5\167"+
    "\1\0\1\315\1\u0182\15\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\1\u0183\4\167\1\0\1\315\16\167\7\0\1\167"+
    "\2\0\1\167\11\0\1\314\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\6\0\5\167\1\0\1\315\15\167\1\u0184"+
    "\7\0\1\167\2\0\1\167\26\0\1\276\70\0\1\277"+
    "\62\0\1\u0185\76\0\1\u0186\57\0\1\u0187\77\0\1\u013a"+
    "\50\0\1\u0188\75\0\1\u0189\56\0\1\u018a\104\0\1\u018b"+
    "\46\0\1\u018c\104\0\1\u018d\55\0\1\u018e\64\0\1\311"+
    "\56\0\1\u0138\107\0\1\u0138\54\0\1\u018f\100\0\1\311"+
    "\26\0\1\320\1\0\1\320\1\0\1\320\6\0\3\320"+
    "\1\u0190\1\320\1\u0178\1\0\16\320\7\0\1\320\2\0"+
    "\1\320\13\0\1\320\1\0\1\320\1\0\1\320\6\0"+
    "\5\320\1\314\1\0\11\320\1\u0191\4\320\7\0\1\320"+
    "\2\0\1\320\13\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\5\320\1\314\1\0\1\320\1\u0192\14\320\7\0"+
    "\1\320\2\0\1\320\13\0\1\320\1\0\1\320\1\0"+
    "\1\320\6\0\5\320\1\u017d\1\0\16\320\7\0\1\320"+
    "\2\0\1\320\13\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\5\320\1\314\1\0\11\320\1\u0193\4\320\7\0"+
    "\1\320\2\0\1\320\13\0\1\320\1\0\1\320\1\0"+
    "\1\320\6\0\5\320\1\314\1\0\2\320\1\u0194\13\320"+
    "\7\0\1\320\2\0\1\320\13\0\1\320\1\0\1\320"+
    "\1\0\1\320\6\0\5\320\1\314\1\0\6\320\1\u0195"+
    "\7\320\7\0\1\320\2\0\1\320\13\0\1\320\1\0"+
    "\1\320\1\0\1\320\6\0\5\320\1\314\1\0\1\u0196"+
    "\15\320\7\0\1\320\2\0\1\320\13\0\1\320\1\0"+
    "\1\320\1\0\1\320\6\0\1\u0197\4\320\1\314\1\0"+
    "\16\320\7\0\1\320\2\0\1\320\13\0\1\320\1\0"+
    "\1\320\1\0\1\320\6\0\5\320\1\314\1\0\15\320"+
    "\1\u0198\7\0\1\320\2\0\1\320\11\0\1\u0178\22\0"+
    "\1\u017a\42\0\1\314\1\0\1\167\1\0\1\167\1\0"+
    "\1\167\6\0\4\167\1\u0199\1\0\1\315\16\167\7\0"+
    "\1\167\2\0\1\167\11\0\1\314\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\5\167\1\0\1\315\2\167"+
    "\1\u019a\13\167\7\0\1\167\2\0\1\167\11\0\1\314"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\6\0\5\167"+
    "\1\0\1\315\2\167\1\u019b\13\167\7\0\1\167\2\0"+
    "\1\167\11\0\1\u017d\22\0\1\u017e\42\0\1\314\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\5\167\1\0"+
    "\1\315\5\167\1\u019c\10\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\5\167\1\0\1\315\3\167\1\u019d\12\167\7\0"+
    "\1\167\2\0\1\167\11\0\1\314\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\1\u019e\4\167\1\0\1\315"+
    "\16\167\7\0\1\167\2\0\1\167\11\0\1\u019f\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\5\167\1\0"+
    "\1\u01a0\16\167\7\0\1\167\2\0\1\167\11\0\1\u01a1"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\6\0\5\167"+
    "\1\0\1\u01a2\16\167\7\0\1\167\2\0\1\167\11\0"+
    "\1\u01a3\1\0\1\167\1\0\1\167\1\0\1\167\6\0"+
    "\5\167\1\0\1\u01a4\16\167\7\0\1\167\2\0\1\167"+
    "\37\0\1\u01a5\66\0\1\u01a6\70\0\1\u0169\60\0\1\u01a7"+
    "\66\0\1\u01a8\74\0\1\u01a9\56\0\1\u01aa\74\0\1\u01ab"+
    "\61\0\1\u013a\60\0\1\u0138\102\0\1\u0138\26\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\4\320\1\u01ac\1\314"+
    "\1\0\16\320\7\0\1\320\2\0\1\320\13\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\5\320\1\314\1\0"+
    "\2\320\1\u01ad\13\320\7\0\1\320\2\0\1\320\13\0"+
    "\1\320\1\0\1\320\1\0\1\320\6\0\5\320\1\314"+
    "\1\0\2\320\1\u01ae\13\320\7\0\1\320\2\0\1\320"+
    "\13\0\1\320\1\0\1\320\1\0\1\320\6\0\5\320"+
    "\1\314\1\0\5\320\1\u01af\10\320\7\0\1\320\2\0"+
    "\1\320\13\0\1\320\1\0\1\320\1\0\1\320\6\0"+
    "\5\320\1\314\1\0\3\320\1\u01b0\12\320\7\0\1\320"+
    "\2\0\1\320\13\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\1\u01b1\4\320\1\314\1\0\16\320\7\0\1\320"+
    "\2\0\1\320\13\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\5\320\1\u01b2\1\0\16\320\7\0\1\320\2\0"+
    "\1\320\13\0\1\320\1\0\1\320\1\0\1\320\6\0"+
    "\5\320\1\u01b3\1\0\16\320\7\0\1\320\2\0\1\320"+
    "\13\0\1\320\1\0\1\320\1\0\1\320\6\0\5\320"+
    "\1\u01a3\1\0\16\320\7\0\1\320\2\0\1\320\11\0"+
    "\1\u01b4\1\0\1\167\1\0\1\167\1\0\1\167\6\0"+
    "\5\167\1\0\1\u01b5\16\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\5\167\1\0\1\315\7\167\1\u01b6\6\167\7\0"+
    "\1\167\2\0\1\167\11\0\1\314\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\1\167\1\u01b7\3\167\1\0"+
    "\1\315\16\167\7\0\1\167\2\0\1\167\11\0\1\314"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\6\0\1\u01b8"+
    "\4\167\1\0\1\315\16\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\314\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\6\0\5\167\1\0\1\315\4\167\1\u01b9\11\167\7\0"+
    "\1\167\2\0\1\167\11\0\1\u01ba\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\5\167\1\0\1\u01bb\16\167"+
    "\7\0\1\167\2\0\1\167\11\0\1\u019f\22\0\1\u01a0"+
    "\42\0\1\u01a1\22\0\1\u01a2\42\0\1\u01a3\22\0\1\u01a4"+
    "\71\0\1\u01bc\66\0\1\311\63\0\1\u01bd\55\0\1\311"+
    "\75\0\1\u01be\72\0\1\u013a\63\0\1\u0169\36\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\5\320\1\u01bf\1\0"+
    "\16\320\7\0\1\320\2\0\1\320\13\0\1\320\1\0"+
    "\1\320\1\0\1\320\6\0\5\320\1\314\1\0\7\320"+
    "\1\u01c0\6\320\7\0\1\320\2\0\1\320\13\0\1\320"+
    "\1\0\1\320\1\0\1\320\6\0\1\320\1\u01c1\3\320"+
    "\1\314\1\0\16\320\7\0\1\320\2\0\1\320\13\0"+
    "\1\320\1\0\1\320\1\0\1\320\6\0\1\u01c2\4\320"+
    "\1\314\1\0\16\320\7\0\1\320\2\0\1\320\13\0"+
    "\1\320\1\0\1\320\1\0\1\320\6\0\5\320\1\314"+
    "\1\0\4\320\1\u01c3\11\320\7\0\1\320\2\0\1\320"+
    "\13\0\1\320\1\0\1\320\1\0\1\320\6\0\5\320"+
    "\1\u01c4\1\0\16\320\7\0\1\320\2\0\1\320\11\0"+
    "\1\u01b4\22\0\1\u01b5\42\0\1\314\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\6\0\1\u01c5\4\167\1\0\1\315"+
    "\16\167\7\0\1\167\2\0\1\167\11\0\1\u01c6\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\6\0\5\167\1\0"+
    "\1\u01c7\16\167\7\0\1\167\2\0\1\167\11\0\1\u01c8"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\6\0\5\167"+
    "\1\0\1\u01c9\16\167\7\0\1\167\2\0\1\167\11\0"+
    "\1\u01ca\1\0\1\167\1\0\1\167\1\0\1\167\6\0"+
    "\5\167\1\0\1\u01cb\16\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\u01ba\22\0\1\u01bb\72\0\1\u0138\53\0\1\u0138"+
    "\102\0\1\u0169\34\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\1\u01cc\4\320\1\314\1\0\16\320\7\0\1\320"+
    "\2\0\1\320\13\0\1\320\1\0\1\320\1\0\1\320"+
    "\6\0\5\320\1\u01cd\1\0\16\320\7\0\1\320\2\0"+
    "\1\320\13\0\1\320\1\0\1\320\1\0\1\320\6\0"+
    "\5\320\1\u01ce\1\0\16\320\7\0\1\320\2\0\1\320"+
    "\13\0\1\320\1\0\1\320\1\0\1\320\6\0\5\320"+
    "\1\u01cf\1\0\16\320\7\0\1\320\2\0\1\320\11\0"+
    "\1\u01d0\1\0\1\167\1\0\1\167\1\0\1\167\6\0"+
    "\5\167\1\0\1\u01d1\16\167\7\0\1\167\2\0\1\167"+
    "\11\0\1\u01c6\22\0\1\u01c7\42\0\1\u01c8\22\0\1\u01c9"+
    "\42\0\1\u01ca\22\0\1\u01cb\44\0\1\320\1\0\1\320"+
    "\1\0\1\320\6\0\5\320\1\u01d2\1\0\16\320\7\0"+
    "\1\320\2\0\1\320\11\0\1\u01d0\22\0\1\u01d1\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20682];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\5\0\5\1\14\0\1\1\11\0\4\1\1\11"+
    "\2\1\3\11\10\1\2\11\5\1\2\11\4\1\4\11"+
    "\6\1\2\11\1\1\4\11\3\1\1\11\1\1\1\11"+
    "\1\1\1\11\5\1\1\0\1\1\16\0\3\1\1\0"+
    "\2\1\2\0\2\1\1\0\1\11\11\1\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\2\0\1\1\1\11\1\1"+
    "\2\11\1\0\1\11\12\1\5\11\2\1\1\0\1\11"+
    "\1\1\1\11\4\1\35\0\2\11\1\1\1\0\1\11"+
    "\1\1\1\11\12\0\24\1\3\11\50\0\6\1\1\0"+
    "\1\11\7\1\36\0\1\1\6\0\2\1\1\11\2\1"+
    "\1\0\1\11\7\1\25\0\1\1\7\0\2\1\1\11"+
    "\3\1\1\11\6\1\24\0\6\1\1\0\1\11\1\0"+
    "\1\11\1\1\1\11\15\0\2\1\1\0\1\11\4\1"+
    "\1\0\1\11\3\0\1\1\4\0\2\1\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\3\1\1\0\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _VtlLexer() {
    this((java.io.Reader)null);
  }

  private class StateHolder extends ListElement {
    public final Integer transitionalState;

    public StateHolder(@NotNull Integer state, @Nullable Integer transitionalState, @Nullable StateHolder prevElement) {
      super(state, prevElement);
      this.transitionalState = transitionalState;
    }
  }

  private class ListElement {
    public final Integer data;
    public final ListElement prevElement;

    public ListElement(@NotNull Integer data, @Nullable ListElement prevElement) {
      this.data = data;
      this.prevElement = prevElement;
    }

    public String toString() {
      return " [d" + data + " " + (prevElement == null ? "" : prevElement) + "] ";
    }
  }

  private class ParensState {
    int parensLevel = 0;
    int bracesLevel = 0;
    ListElement specialBraceLevel = null;

    public String toString() {
      return " [p" + parensLevel + " b" + bracesLevel + " " + (specialBraceLevel == null ? "" : specialBraceLevel) + "] ";
    }
  }

  private int commentLevel = 0;
  private StateHolder savedJflexState = null;
  private ParensState storedParensState = null;
  private ParensState parensState = new ParensState();

  private void resetAll() {
    zzAtBOL = true;
    zzAtEOF = false;
    zzBuffer = "";
    zzBufferArray = null;
    zzCurrentPos = 0;
    zzEndRead = 0;
    zzFin = new boolean [ZZ_BUFFERSIZE+1];
    zzLexicalState = 0;
    zzMarkedPos = 0;
    zzPushbackPos  = 0;
    zzStartRead = 0;
    zzState = 0;
    commentLevel = 0;
    savedJflexState = null;
    storedParensState = null;
    parensState = new ParensState();
  }

  void leftParen() {
    parensState.parensLevel++;
  }

  boolean rightParen() {
    return --parensState.parensLevel == 0;
  }

  void saveJflexStateAndBegin(int stateToStart) {
    saveJflexStateAndBegin(null, stateToStart);
  }

  void saveJflexStateAndBegin(@Nullable Integer transitionalState, int stateToStart) {
    savedJflexState = new StateHolder(yystate(), transitionalState, savedJflexState);
    yybegin(stateToStart);
  }

  void restoreJflexState() {
    assert savedJflexState != null;
    yybegin(savedJflexState.data.intValue());
    savedJflexState = (StateHolder)savedJflexState.prevElement;
  }

  void restoreThruTransitionalState() {
    assert savedJflexState != null;
    final Integer transitional = savedJflexState.transitionalState;
    if (transitional != null) {
      yybegin(transitional.intValue());
    }
    else {
      restoreJflexState();
    }
  }

  void openingDoubleQuote() {
//    System.out.println(zzCurrentPos + ": -> opening: " + parensState + " jflex: " + savedJflexState);
    if (storedParensState == null) {
      storedParensState = parensState;
      parensState = new ParensState();
      yybegin(DOUBLE_QUOTED);
    } 
    else {
      // doublequoted text cannot contain double quote, so this one is considered as closing one
      assert savedJflexState != null;
      savedJflexState = (StateHolder)savedJflexState.prevElement;
      closingDoubleQuote();
    }
//    System.out.println("  <- opening: " + parensState + " jflex: " + savedJflexState);
  }

  void openingDoubleQuoteSimple() {
//    System.out.println(zzCurrentPos + ": -> opening simple: " + parensState + " jflex: " + savedJflexState);
    if (storedParensState == null) {
      yybegin(DOUBLE_QUOTED_SIMPLE);
    } 
    else {
      // doublequoted text cannot contain double quote, so this one is considered as closing one
      assert savedJflexState != null;
      savedJflexState = (StateHolder)savedJflexState.prevElement;
      closingDoubleQuote();
    }
//    System.out.println("  <- opening simple: " + parensState + " jflex: " + savedJflexState);
  }

  void closingDoubleQuote() {
//    System.out.println(zzCurrentPos + ": -> closing: " + parensState + " jflex: " + savedJflexState);
    assert storedParensState != null;
    parensState = storedParensState;
    storedParensState = null;
    yybegin(PARENS); 
//    System.out.println("  <- closing: " + parensState + " jflex: " + savedJflexState);
  }

  void dollarLeftBrace() {
    parensState.specialBraceLevel = new ListElement(parensState.bracesLevel++, parensState.specialBraceLevel);
  }

  void leftBrace() {
    parensState.bracesLevel++;
  }

  boolean rightBrace() {
    parensState.bracesLevel--;
    assert parensState.specialBraceLevel == null || parensState.specialBraceLevel.data <= parensState.bracesLevel;
    if(parensState.specialBraceLevel != null && parensState.specialBraceLevel.data == parensState.bracesLevel) {
      parensState.specialBraceLevel = parensState.specialBraceLevel.prevElement;
      return true;
    }
    return false;
  }



  public _VtlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _VtlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1296) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    resetAll();
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    resetAll();
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return IDENTIFIER;
          }
        case 90: break;
        case 64: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 32;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 31;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return IDENTIFIER;
          }
        case 91: break;
        case 3: 
          { if(--commentLevel == 0) yybegin(YYINITIAL); return MULTILINE_COMMENT;
          }
        case 92: break;
        case 54: 
          { return AND;
          }
        case 93: break;
        case 39: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 29;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 28;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(INTERPOLATION); return START_REFERENCE;
          }
        case 94: break;
        case 59: 
          { if(--commentLevel == 0) yybegin(DOUBLE_QUOTED); return MULTILINE_COMMENT;
          }
        case 95: break;
        case 70: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 22;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 23;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return SHARP_ELSE;
          }
        case 96: break;
        case 35: 
          { restoreJflexState(); return RIGHT_BRACE;
          }
        case 97: break;
        case 74: 
          { return SHARP_PARSE;
          }
        case 98: break;
        case 25: 
          { return PERCENT;
          }
        case 99: break;
        case 33: 
          { return COLON;
          }
        case 100: break;
        case 63: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 30;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 31;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(AFTER_V_IDENT); return IDENTIFIER;
          }
        case 101: break;
        case 50: 
          { return EQ;
          }
        case 102: break;
        case 4: 
          { commentLevel = 0; yybegin(DOUBLE_QUOTED); return MULTILINE_COMMENT;
          }
        case 103: break;
        case 20: 
          { return rightBrace() ? RIGHT_BRACE : RIGHT_BRACE_IN_EXPR;
          }
        case 104: break;
        case 57: 
          { assert commentLevel == 0; commentLevel++; yybegin(DOUBLE_QUOTED_COMMENT_BODY); return MULTILINE_COMMENT;
          }
        case 105: break;
        case 19: 
          { openingDoubleQuote(); return DOUBLE_QUOTE;
          }
        case 106: break;
        case 44: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(PARENS); return IDENTIFIER;
          }
        case 107: break;
        case 80: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 11;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(PARENS); return SHARP_ELSEIF;
          }
        case 108: break;
        case 30: 
          { return RIGHT_BRACKET;
          }
        case 109: break;
        case 9: 
          { return RIGHT_BRACE;
          }
        case 110: break;
        case 62: 
          { return SHARP_IF;
          }
        case 111: break;
        case 34: 
          { return SEMICOLON;
          }
        case 112: break;
        case 21: 
          { leftParen(); return LEFT_PAREN;
          }
        case 113: break;
        case 87: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 17;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(PARENS); return SHARP_INCLUDE;
          }
        case 114: break;
        case 46: 
          { return DOUBLE;
          }
        case 115: break;
        case 32: 
          { return COMMA;
          }
        case 116: break;
        case 36: 
          { closingDoubleQuote(); return DOUBLE_QUOTE;
          }
        case 117: break;
        case 82: 
          { return SHARP_INCLUDE;
          }
        case 118: break;
        case 15: 
          { return JAVA_DOT;
          }
        case 119: break;
        case 43: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return JAVA_DOT;
          }
        case 120: break;
        case 56: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { if(rightParen()) restoreThruTransitionalState(); return RIGHT_PAREN;
          }
        case 121: break;
        case 22: 
          { yybegin(SINGLE_QUOTED); return SINGLE_QUOTE;
          }
        case 122: break;
        case 23: 
          { return PLUS;
          }
        case 123: break;
        case 5: 
          { return BAD_CHARACTER;
          }
        case 124: break;
        case 11: 
          { restoreJflexState(); return IDENTIFIER;
          }
        case 125: break;
        case 88: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 13;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(PARENS); return SHARP_FOREACH;
          }
        case 126: break;
        case 38: 
          { yybegin(PARENS); return SINGLE_QUOTE;
          }
        case 127: break;
        case 89: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 16;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(PARENS); return SHARP_EVALUATE;
          }
        case 128: break;
        case 27: 
          { return LT;
          }
        case 129: break;
        case 79: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 19;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(PARENS); return SHARP_PARSE;
          }
        case 130: break;
        case 60: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 27;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 28;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(RIGHT_BRACE_CONSUMER, INTERPOLATION); return START_REF_FORMAL;
          }
        case 131: break;
        case 83: 
          { return SHARP_FOREACH;
          }
        case 132: break;
        case 18: 
          { return ASTERISK;
          }
        case 133: break;
        case 40: 
          { return ONELINE_COMMENT;
          }
        case 134: break;
        case 52: 
          { return IN;
          }
        case 135: break;
        case 86: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 15;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(PARENS); return SHARP_LITERAL;
          }
        case 136: break;
        case 68: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 21;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(PARENS); return SHARP_IF;
          }
        case 137: break;
        case 81: 
          { return SHARP_LITERAL;
          }
        case 138: break;
        case 48: 
          { return NEQ;
          }
        case 139: break;
        case 13: 
          { return START_REFERENCE;
          }
        case 140: break;
        case 49: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { openingDoubleQuoteSimple(); return DOUBLE_QUOTE;
          }
        case 141: break;
        case 73: 
          { return SHARP_MACRODECL;
          }
        case 142: break;
        case 28: 
          { return GT;
          }
        case 143: break;
        case 8: 
          { return LEFT_BRACE;
          }
        case 144: break;
        case 24: 
          { return DIVIDE;
          }
        case 145: break;
        case 31: 
          { if(rightParen()) restoreJflexState(); return RIGHT_PAREN;
          }
        case 146: break;
        case 17: 
          { leftBrace(); return LEFT_BRACE_IN_EXPR;
          }
        case 147: break;
        case 53: 
          { return OR;
          }
        case 148: break;
        case 77: 
          { return SHARP_DEFINE;
          }
        case 149: break;
        case 16: 
          { return EXCLAIM;
          }
        case 150: break;
        case 26: 
          { return ASSIGN;
          }
        case 151: break;
        case 42: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { restoreThruTransitionalState(); return IDENTIFIER;
          }
        case 152: break;
        case 2: 
          { return STRING_TEXT;
          }
        case 153: break;
        case 10: 
          { leftParen(); yybegin(PARENS); return LEFT_PAREN;
          }
        case 154: break;
        case 6: 
          { return WHITE_SPACE;
          }
        case 155: break;
        case 37: 
          { yybegin(PARENS); return DOUBLE_QUOTE;
          }
        case 156: break;
        case 45: 
          { dollarLeftBrace(); return START_REF_FORMAL;
          }
        case 157: break;
        case 71: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 20;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(PARENS); return SHARP_SET;
          }
        case 158: break;
        case 12: 
          { return INTEGER;
          }
        case 159: break;
        case 58: 
          { commentLevel++; return MULTILINE_COMMENT;
          }
        case 160: break;
        case 55: 
          { return GTE;
          }
        case 161: break;
        case 14: 
          { return MINUS;
          }
        case 162: break;
        case 47: 
          { return RANGE;
          }
        case 163: break;
        case 78: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 18;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(PARENS); return SHARP_MACRODECL;
          }
        case 164: break;
        case 41: 
          { assert commentLevel == 0; commentLevel++; yybegin(COMMENT_BODY); return MULTILINE_COMMENT;
          }
        case 165: break;
        case 1: 
          { return TEMPLATE_TEXT;
          }
        case 166: break;
        case 61: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { saveJflexStateAndBegin(USER_DIRECTIVE); return SHARP_MACROCALL;
          }
        case 167: break;
        case 66: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 24;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 23;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return SHARP_END;
          }
        case 168: break;
        case 75: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 26;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 23;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return SHARP_BREAK;
          }
        case 169: break;
        case 29: 
          { return LEFT_BRACKET;
          }
        case 170: break;
        case 85: 
          { return SHARP_EVALUATE;
          }
        case 171: break;
        case 84: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 14;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { saveJflexStateAndBegin(PARENS); return SHARP_DEFINE;
          }
        case 172: break;
        case 69: 
          { return BOOLEAN;
          }
        case 173: break;
        case 72: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 25;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 23;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return SHARP_STOP;
          }
        case 174: break;
        case 76: 
          { return SHARP_ELSEIF;
          }
        case 175: break;
        case 51: 
          { return LTE;
          }
        case 176: break;
        case 67: 
          { return SHARP_SET;
          }
        case 177: break;
        case 65: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { if(rightParen()) yybegin(AFTER_V_IDENT); return RIGHT_PAREN;
          }
        case 178: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
